package com.jd.appstore.domain.utils;import java.io.BufferedInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;/** * 类描述：apk校验码工具 * <p/> * 创建人：Lynn * <p/> * 创建时间：2013-2-1 下午6:42:59 * <p/> * 修改备注： * <p/> * * @version 1.0 * @since 1.0 */public class VerifyCode {    final static String TAG = "VerifyUtil";    private File file;    /**     * 要校验的文件路径     *     * @param path     */    public VerifyCode(String path) {        this(new File(path));    }    /**     * 要校验的文件     *     * @param file     */    public VerifyCode(File file) {        this.file = file;        if (file == null) {            throw new RuntimeException("the file is null");        }        if (this.file.length() < 4096) {            throw new RuntimeException("the file is a invalid apk");        }    }    private byte[] getData() {        byte[] data = new byte[4100];//4096+4        try {            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));            bis.read(data);            long len = file.length();            String length = String.valueOf(len);            char last = length.charAt(length.length() - 1);            byte[] size = intToByte(last);            data[4096] = size[0];            data[4097] = size[1];            data[4098] = size[2];            data[4099] = size[3];        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return data;    }    /**     * 生成校验码     *     * @return 校验码     */    public String verifyCode() {        return sha256(md5(getData()));    }    /**     * MD5加密     *     * @param source 要加密的字节数组     * @return 加密后的结果     */    public String md5(byte[] source) {        String result;        try {            final MessageDigest mDigest = MessageDigest.getInstance("MD5");            mDigest.update(source);            result = bytesToHexString(mDigest.digest()).toUpperCase();        } catch (NoSuchAlgorithmException e) {            result = String.valueOf(source.hashCode()).toUpperCase();        }        return result;    }    /**     * MD5加密     *     * @param source 要加密的源串     * @return 加密后的结果     */    public String md5(String source) {        String result;        try {            final MessageDigest mDigest = MessageDigest.getInstance("MD5");            mDigest.update(source.getBytes());            result = bytesToHexString(mDigest.digest()).toUpperCase();        } catch (NoSuchAlgorithmException e) {            result = String.valueOf(source.hashCode()).toUpperCase();        }        return result;    }    private String bytesToHexString(byte[] bytes) {        // http://stackoverflow.com/questions/332079        StringBuilder sb = new StringBuilder();        for (int i = 0; i < bytes.length; i++) {            String hex = Integer.toHexString(0xFF & bytes[i]);            if (hex.length() == 1) {                sb.append('0');            }            sb.append(hex);        }        return sb.toString();    }    public byte[] intToByte(int i) {        byte[] abyte0 = new byte[4];        abyte0[0] = (byte) (0xff & i);        abyte0[1] = (byte) ((0xff00 & i) >> 8);        abyte0[2] = (byte) ((0xff0000 & i) >> 16);        abyte0[3] = (byte) ((0xff000000 & i) >> 24);        return abyte0;    }    public String sha256(String source) {        String result;        try {            final MessageDigest mDigest = MessageDigest.getInstance("SHA-256");            mDigest.update(source.getBytes());            result = bytesToHexString(mDigest.digest()).toUpperCase();        } catch (NoSuchAlgorithmException e) {            result = String.valueOf(source.hashCode()).toUpperCase();        }        return result;    }    public static void main(String args[]) {        File file = new File("E://2.apk");        VerifyCode verifyCode = new VerifyCode(file);        System.out.println("aaaaa->" + verifyCode.verifyCode());    }}